// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RubBotApi.Data;

#nullable disable

namespace RubBotApi.Migrations
{
    [DbContext(typeof(RubBotContext))]
    [Migration("20240118130052_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AreaProject", b =>
                {
                    b.Property<string>("AreasId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProjectsId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("AreasId", "ProjectsId");

                    b.HasIndex("ProjectsId");

                    b.ToTable("AreaProject");
                });

            modelBuilder.Entity("AreaResource", b =>
                {
                    b.Property<string>("AreasId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ResourcesId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("AreasId", "ResourcesId");

                    b.HasIndex("ResourcesId");

                    b.ToTable("AreaResource");
                });

            modelBuilder.Entity("ProjectResource", b =>
                {
                    b.Property<string>("ProjectsId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ResourcesId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ProjectsId", "ResourcesId");

                    b.HasIndex("ResourcesId");

                    b.ToTable("ProjectResource");
                });

            modelBuilder.Entity("RubBotApi.Models.Area", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AreaCover")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAchieved")
                        .HasColumnType("bit");

                    b.Property<string>("LabelId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("LabelId");

                    b.ToTable("Areas");

                    b.HasData(
                        new
                        {
                            Id = "3165c2ffbc32c7b7",
                            AreaCover = "user",
                            IsAchieved = false,
                            LabelId = "2f81a686-7531-11e8-86e5-f0d5bf731f68",
                            Name = "Personal"
                        },
                        new
                        {
                            Id = "50fc739db1043beb",
                            AreaCover = "dumbbell",
                            IsAchieved = false,
                            LabelId = "2f81a112-5678-11e8-86e5-f0d534f731f68",
                            Name = "Health & Fitness"
                        },
                        new
                        {
                            Id = "3fea19696abe8bcf",
                            AreaCover = "briefcase",
                            IsAchieved = false,
                            LabelId = "2f99a636-7111-11e8-86e5-f0d534f731f68",
                            Name = "Work"
                        },
                        new
                        {
                            Id = "280c9bbeb9f46af1",
                            AreaCover = "money-bill-trend-up",
                            IsAchieved = false,
                            LabelId = "2f81a686-7531-11e8-86e5-f0d534f731f68",
                            Name = "Side Hustle"
                        },
                        new
                        {
                            Id = "e905912d76ef7618",
                            AreaCover = "route",
                            IsAchieved = false,
                            LabelId = "2f81a686-7531-11e8-86e5-f0d5bf731f68",
                            Name = "Travel"
                        },
                        new
                        {
                            Id = "4e33dab54181420f",
                            AreaCover = "leanpub",
                            IsAchieved = false,
                            LabelId = "2f81a612-7531-11e8-86e5-f0d534f731f68",
                            Name = "Learning"
                        });
                });

            modelBuilder.Entity("RubBotApi.Models.Labels", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Labels");

                    b.HasData(
                        new
                        {
                            Id = "2f81a686-7531-11e8-86e5-f0d5bf731f68",
                            Name = "Personal"
                        },
                        new
                        {
                            Id = "2f99a636-7111-11e8-86e5-f0d534f731f68",
                            Name = "Work"
                        },
                        new
                        {
                            Id = "2f81a686-7531-11e8-86e5-f0d534f731f68",
                            Name = "Business"
                        },
                        new
                        {
                            Id = "2f81a612-7531-11e8-86e5-f0d534f731f68",
                            Name = "School"
                        },
                        new
                        {
                            Id = "2f81a789-1234-11e8-86e5-f0d534f731f68",
                            Name = "Productivity"
                        },
                        new
                        {
                            Id = "2f81a112-5678-11e8-86e5-f0d534f731f68",
                            Name = "Fitness"
                        },
                        new
                        {
                            Id = "2f81a632-9012-11e8-86e5-f0d534f731f68",
                            Name = "Investment"
                        });
                });

            modelBuilder.Entity("RubBotApi.Models.Note", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AreasId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsAchieved")
                        .HasColumnType("bit");

                    b.Property<string>("LabelId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("LastEditedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NoteBooksId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProjectsId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ResourcesId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("StatusId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TaskId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("AreasId");

                    b.HasIndex("LabelId");

                    b.HasIndex("NoteBooksId");

                    b.HasIndex("ProjectsId");

                    b.HasIndex("ResourcesId");

                    b.HasIndex("StatusId");

                    b.HasIndex("TaskId");

                    b.ToTable("Notes");
                });

            modelBuilder.Entity("RubBotApi.Models.NoteBooks", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("NoteBooks");
                });

            modelBuilder.Entity("RubBotApi.Models.Project", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsAchieved")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("StatusId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("StatusId");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("RubBotApi.Models.Resource", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("Favorite")
                        .HasColumnType("bit");

                    b.Property<bool>("IsAchieved")
                        .HasColumnType("bit");

                    b.Property<string>("LabelId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StatusId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("LabelId");

                    b.HasIndex("StatusId");

                    b.ToTable("Resources");
                });

            modelBuilder.Entity("RubBotApi.Models.Status", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Status");

                    b.HasData(
                        new
                        {
                            Id = "2f81a686-7531-11e8-86e5-f0d5bf731f68",
                            Name = "Inbox"
                        },
                        new
                        {
                            Id = "2f81a123-1234-11e8-86e5-f0d5bf731f68",
                            Name = "Planned"
                        },
                        new
                        {
                            Id = "2f81a456-5678-11e8-86e5-f0d5bf731f68",
                            Name = "In Progress"
                        },
                        new
                        {
                            Id = "2f81a789-9012-11e8-86e5-f0d5bf731f68",
                            Name = "Done"
                        });
                });

            modelBuilder.Entity("RubBotApi.Models.Tasks", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Done")
                        .HasColumnType("bit");

                    b.Property<bool>("IsAchieved")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProjectsId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ResourcesId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ProjectsId");

                    b.HasIndex("ResourcesId");

                    b.ToTable("Tasks");
                });

            modelBuilder.Entity("AreaProject", b =>
                {
                    b.HasOne("RubBotApi.Models.Area", null)
                        .WithMany()
                        .HasForeignKey("AreasId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RubBotApi.Models.Project", null)
                        .WithMany()
                        .HasForeignKey("ProjectsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AreaResource", b =>
                {
                    b.HasOne("RubBotApi.Models.Area", null)
                        .WithMany()
                        .HasForeignKey("AreasId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RubBotApi.Models.Resource", null)
                        .WithMany()
                        .HasForeignKey("ResourcesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProjectResource", b =>
                {
                    b.HasOne("RubBotApi.Models.Project", null)
                        .WithMany()
                        .HasForeignKey("ProjectsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RubBotApi.Models.Resource", null)
                        .WithMany()
                        .HasForeignKey("ResourcesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RubBotApi.Models.Area", b =>
                {
                    b.HasOne("RubBotApi.Models.Labels", "Type")
                        .WithMany("Areas")
                        .HasForeignKey("LabelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Type");
                });

            modelBuilder.Entity("RubBotApi.Models.Note", b =>
                {
                    b.HasOne("RubBotApi.Models.Area", "Areas")
                        .WithMany("Notes")
                        .HasForeignKey("AreasId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RubBotApi.Models.Labels", "Labels")
                        .WithMany("Notes")
                        .HasForeignKey("LabelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RubBotApi.Models.NoteBooks", null)
                        .WithMany("Notes")
                        .HasForeignKey("NoteBooksId");

                    b.HasOne("RubBotApi.Models.Project", "Projects")
                        .WithMany("Notes")
                        .HasForeignKey("ProjectsId");

                    b.HasOne("RubBotApi.Models.Resource", "Resources")
                        .WithMany()
                        .HasForeignKey("ResourcesId");

                    b.HasOne("RubBotApi.Models.Status", "Status")
                        .WithMany("Notes")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RubBotApi.Models.Tasks", "Tasks")
                        .WithMany("Notes")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Areas");

                    b.Navigation("Labels");

                    b.Navigation("Projects");

                    b.Navigation("Resources");

                    b.Navigation("Status");

                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("RubBotApi.Models.Project", b =>
                {
                    b.HasOne("RubBotApi.Models.Status", "Status")
                        .WithMany("Projects")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Status");
                });

            modelBuilder.Entity("RubBotApi.Models.Resource", b =>
                {
                    b.HasOne("RubBotApi.Models.Labels", "Labels")
                        .WithMany("Resources")
                        .HasForeignKey("LabelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RubBotApi.Models.Status", "Status")
                        .WithMany("Resources")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Labels");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("RubBotApi.Models.Tasks", b =>
                {
                    b.HasOne("RubBotApi.Models.Project", "Projects")
                        .WithMany("Tasks")
                        .HasForeignKey("ProjectsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RubBotApi.Models.Resource", "Resources")
                        .WithMany("Tasks")
                        .HasForeignKey("ResourcesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Projects");

                    b.Navigation("Resources");
                });

            modelBuilder.Entity("RubBotApi.Models.Area", b =>
                {
                    b.Navigation("Notes");
                });

            modelBuilder.Entity("RubBotApi.Models.Labels", b =>
                {
                    b.Navigation("Areas");

                    b.Navigation("Notes");

                    b.Navigation("Resources");
                });

            modelBuilder.Entity("RubBotApi.Models.NoteBooks", b =>
                {
                    b.Navigation("Notes");
                });

            modelBuilder.Entity("RubBotApi.Models.Project", b =>
                {
                    b.Navigation("Notes");

                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("RubBotApi.Models.Resource", b =>
                {
                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("RubBotApi.Models.Status", b =>
                {
                    b.Navigation("Notes");

                    b.Navigation("Projects");

                    b.Navigation("Resources");
                });

            modelBuilder.Entity("RubBotApi.Models.Tasks", b =>
                {
                    b.Navigation("Notes");
                });
#pragma warning restore 612, 618
        }
    }
}
